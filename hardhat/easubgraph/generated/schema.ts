// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExecutableAgreement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExecutableAgreement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecutableAgreement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecutableAgreement", id.toString(), this);
    }
  }

  static load(id: string): ExecutableAgreement | null {
    return changetype<ExecutableAgreement | null>(
      store.get("ExecutableAgreement", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proxy(): Bytes {
    let value = this.get("proxy");
    return value!.toBytes();
  }

  set proxy(value: Bytes) {
    this.set("proxy", Value.fromBytes(value));
  }

  get offerType(): i32 {
    let value = this.get("offerType");
    return value!.toI32();
  }

  set offerType(value: i32) {
    this.set("offerType", Value.fromI32(value));
  }

  get duration(): BigInt | null {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt | null) {
    if (!value) {
      this.unset("duration");
    } else {
      this.set("duration", Value.fromBigInt(<BigInt>value));
    }
  }

  get contractSum(): BigInt | null {
    let value = this.get("contractSum");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set contractSum(value: BigInt | null) {
    if (!value) {
      this.unset("contractSum");
    } else {
      this.set("contractSum", Value.fromBigInt(<BigInt>value));
    }
  }

  get targetToken(): Bytes | null {
    let value = this.get("targetToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set targetToken(value: Bytes | null) {
    if (!value) {
      this.unset("targetToken");
    } else {
      this.set("targetToken", Value.fromBytes(<Bytes>value));
    }
  }

  get issuer(): Bytes | null {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set issuer(value: Bytes | null) {
    if (!value) {
      this.unset("issuer");
    } else {
      this.set("issuer", Value.fromBytes(<Bytes>value));
    }
  }

  get assenter(): Bytes | null {
    let value = this.get("assenter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set assenter(value: Bytes | null) {
    if (!value) {
      this.unset("assenter");
    } else {
      this.set("assenter", Value.fromBytes(<Bytes>value));
    }
  }

  get position(): string | null {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set position(value: string | null) {
    if (!value) {
      this.unset("position");
    } else {
      this.set("position", Value.fromString(<string>value));
    }
  }

  get contractTokenURI(): string | null {
    let value = this.get("contractTokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contractTokenURI(value: string | null) {
    if (!value) {
      this.unset("contractTokenURI");
    } else {
      this.set("contractTokenURI", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get location(): string | null {
    let value = this.get("location");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set location(value: string | null) {
    if (!value) {
      this.unset("location");
    } else {
      this.set("location", Value.fromString(<string>value));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}

export class Deliverable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deliverable entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deliverable must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deliverable", id.toString(), this);
    }
  }

  static load(id: string): Deliverable | null {
    return changetype<Deliverable | null>(store.get("Deliverable", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proxy(): Bytes | null {
    let value = this.get("proxy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proxy(value: Bytes | null) {
    if (!value) {
      this.unset("proxy");
    } else {
      this.set("proxy", Value.fromBytes(<Bytes>value));
    }
  }

  get validatorThreshold(): i32 {
    let value = this.get("validatorThreshold");
    return value!.toI32();
  }

  set validatorThreshold(value: i32) {
    this.set("validatorThreshold", Value.fromI32(value));
  }

  get totalSeconds(): i32 {
    let value = this.get("totalSeconds");
    return value!.toI32();
  }

  set totalSeconds(value: i32) {
    this.set("totalSeconds", Value.fromI32(value));
  }

  get payoutAmount(): BigInt | null {
    let value = this.get("payoutAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set payoutAmount(value: BigInt | null) {
    if (!value) {
      this.unset("payoutAmount");
    } else {
      this.set("payoutAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get receiver(): Bytes | null {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set receiver(value: Bytes | null) {
    if (!value) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromBytes(<Bytes>value));
    }
  }

  get completed(): boolean {
    let value = this.get("completed");
    return value!.toBoolean();
  }

  set completed(value: boolean) {
    this.set("completed", Value.fromBoolean(value));
  }

  get agreement(): string | null {
    let value = this.get("agreement");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set agreement(value: string | null) {
    if (!value) {
      this.unset("agreement");
    } else {
      this.set("agreement", Value.fromString(<string>value));
    }
  }
}

export class Validator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Validator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Validator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Validator", id.toString(), this);
    }
  }

  static load(id: string): Validator | null {
    return changetype<Validator | null>(store.get("Validator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proxy(): Bytes {
    let value = this.get("proxy");
    return value!.toBytes();
  }

  set proxy(value: Bytes) {
    this.set("proxy", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get hasVoted(): boolean {
    let value = this.get("hasVoted");
    return value!.toBoolean();
  }

  set hasVoted(value: boolean) {
    this.set("hasVoted", Value.fromBoolean(value));
  }

  get deliverableIndex(): i32 {
    let value = this.get("deliverableIndex");
    return value!.toI32();
  }

  set deliverableIndex(value: i32) {
    this.set("deliverableIndex", Value.fromI32(value));
  }

  get deliverable(): string | null {
    let value = this.get("deliverable");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deliverable(value: string | null) {
    if (!value) {
      this.unset("deliverable");
    } else {
      this.set("deliverable", Value.fromString(<string>value));
    }
  }
}

export class Executor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Executor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Executor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Executor", id.toString(), this);
    }
  }

  static load(id: string): Executor | null {
    return changetype<Executor | null>(store.get("Executor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proxy(): Bytes {
    let value = this.get("proxy");
    return value!.toBytes();
  }

  set proxy(value: Bytes) {
    this.set("proxy", Value.fromBytes(value));
  }

  get deliverable(): i32 {
    let value = this.get("deliverable");
    return value!.toI32();
  }

  set deliverable(value: i32) {
    this.set("deliverable", Value.fromI32(value));
  }

  get timeLock(): BigInt | null {
    let value = this.get("timeLock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeLock(value: BigInt | null) {
    if (!value) {
      this.unset("timeLock");
    } else {
      this.set("timeLock", Value.fromBigInt(<BigInt>value));
    }
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get hasExecuted(): boolean {
    let value = this.get("hasExecuted");
    return value!.toBoolean();
  }

  set hasExecuted(value: boolean) {
    this.set("hasExecuted", Value.fromBoolean(value));
  }
}
